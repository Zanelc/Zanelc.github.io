<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo基本使用</title>
    <link href="/2023/07/28/Hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/07/28/Hexo%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>Hexo相关的一些基础配置说明。</p><span id="more"></span><h3 id="Front-matter"><a href="#Front-matter" class="headerlink" title="Front-matter"></a>Front-matter</h3><p>front-matter是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，例如</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">1996</span><span class="hljs-string">/01/01</span> <span class="hljs-number">00</span><span class="hljs-string">:00:00</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>常用的参数如下：</p><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>layout</td><td>布局</td><td>config.default_layout</td></tr><tr><td>title</td><td>标题</td><td>文件名</td></tr><tr><td>date</td><td>建立日期</td><td>文件建立日期</td></tr><tr><td>updated</td><td>更新日期</td><td>文件更新日期</td></tr><tr><td>comments</td><td>开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td>&#x2F;</td></tr><tr><td>categories</td><td>分类（文章分类）</td><td>&#x2F;</td></tr><tr><td>hide</td><td>隐藏文章</td><td>默认false</td></tr><tr><td>index_img</td><td>文章封面图</td><td>&#x2F;</td></tr><tr><td>banner_img</td><td>文章顶部大图</td><td>&#x2F;</td></tr></tbody></table><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><blockquote><p>“站点配置” 指的 Hexo 博客目录下的 <em><strong>config.yml</strong>，”主题配置” 指的是 theme&#x2F;fluid&#x2F;</em><strong>config.yml</strong> 或者 <strong>_config.fluid.yml</strong></p></blockquote><p>只要存在于 <strong>_config.fluid.yml</strong> 的配置都是高优先级，修改原 <strong>_config.yml</strong>是无效的，创建该文件主要是为了后续升级方便。</p><h3 id="文字摘要"><a href="#文字摘要" class="headerlink" title="文字摘要"></a>文字摘要</h3><p>摘要默认自动开启，有两种方式来手动指定摘要：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">正文一部分作为摘要</span><br><span class="hljs-string">&lt;!--</span> <span class="hljs-string">more</span> <span class="hljs-string">--&gt;</span><br><span class="hljs-string">正文</span><br></code></pre></td></tr></table></figure><p>另一种是在<strong>Front-matter</strong>中指定，添加 <code>excerpt</code>字段：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span><br><span class="hljs-attr">date:</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo 博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 备份、恢复</title>
    <link href="/2023/07/26/Hexo-%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D/"/>
    <url>/2023/07/26/Hexo-%E5%A4%87%E4%BB%BD%E3%80%81%E6%81%A2%E5%A4%8D/</url>
    
    <content type="html"><![CDATA[<p>hexo网上搭建教程很多，这里就不再复述了，鉴于每次重装系统后都需要重新部署环境，特意重新写一篇教程来讲述博客备份及恢复。</p><span id="more"></span><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>Hexo博客搭建并部署至github上之后，创建一个新分支用来存放源代码，我这里博客网页静态文件分支为 <strong>main</strong>，新建一个<strong>source</strong>分支来存放代码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 创建新分支之前，需要先初始化git仓库，在本地博客目录下执行:</span><br>git init<br><span class="hljs-comment">## 创建新分支 ， 这里命名为 source</span><br>git checkout -b <span class="hljs-string">&quot;source&quot;</span><br><span class="hljs-comment">## 添加远程仓库 ， 这里仓库名称为博客所在仓库</span><br>git remote add origin 仓库名称<br></code></pre></td></tr></table></figure><p>添加远程仓库成功后，配置 <strong>.gitignore</strong>文件，该文件用来指示哪些文件在push时候忽略，默认已经配置好了，我这里内容为:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## gitignore文件内容</span><br><span class="hljs-string">.DS_Store</span><br><span class="hljs-string">Thumbs.db</span><br><span class="hljs-string">db.json</span><br><span class="hljs-string">*.log</span><br><span class="hljs-string">node_modules/</span><br><span class="hljs-string">public/</span><br><span class="hljs-string">.deploy*/</span><br><span class="hljs-string">_multiconfig.yml</span><br></code></pre></td></tr></table></figure><p>接下来使用组合技:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git add .<br>git commit -m <span class="hljs-string">&quot;注释信息&quot;</span><br><span class="hljs-comment">## 要提交的是 source 分支</span><br>git push origin <span class="hljs-built_in">source</span><br></code></pre></td></tr></table></figure><p>提交成功后，仓库会新增一个<strong>source</strong>分支，该分支内容如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">.github</span><br><span class="hljs-string">scaffolds</span><br><span class="hljs-string">source</span><br><span class="hljs-string">themes</span><br><span class="hljs-string">.gitignore</span><br><span class="hljs-string">_config.fluid.yml</span><br><span class="hljs-string">_config.yml</span><br><span class="hljs-string">package-lock.json</span><br><span class="hljs-string">package.json</span><br></code></pre></td></tr></table></figure><p>至此博客的备份任务已经完成，当博客源代码有改动时候，便可将改动提交到该分支。</p><h2 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h2><p><strong>注意</strong>：如果用的是windows备份的，最好恢复也是在windows平台，用其他平台也可以恢复，可能会有部分依赖安装失败问题。</p><p>这里用windows平台举例，假设windows机器刚装完系统，未配置任何环境，先安装<strong>git</strong>、<strong>nodejs</strong>环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 配置git信息</span><br>git config --global user.name yourname<br>git config --global user.email youremail<br><span class="hljs-comment">## 如果已经有公钥，将公钥上传到github，若无，重新创建</span><br>ssh-keygen -t rsa -C youremail<br><span class="hljs-comment">## 安装完nodejs环境后,安装hexo命令</span><br>npm install hexo-cli -g<br></code></pre></td></tr></table></figure><p>克隆远程仓库，注意，拉取 <strong>source</strong> 分支即可</p><p><code>git clone -b source 仓库名称</code></p><p>进入该仓库目录，安装依赖：</p><p><code>npm install</code></p><p>至此博客恢复部署完成，可以在本地尝试一下，看是否正常运行:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo c //删除public文件夹<br>hexo g //在hexo站点根目录下生成public文件夹<br>hexo s //本地启动服务<br>hexo d //部署站点，在本地生成.deploy_git文件夹，并将编译后的文件上传至 GitHub<br></code></pre></td></tr></table></figure><h2 id="小Tips"><a href="#小Tips" class="headerlink" title="小Tips"></a>小Tips</h2><p>每次手动部署推送还是挺麻烦的，使用python脚本一键部署：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">## 一键部署</span><br><span class="hljs-keyword">import</span> os<br>static_cmd=<span class="hljs-string">&quot;hexo c &amp;&amp; hexo g &amp;&amp; hexo d&quot;</span><br>source_cmd=<span class="hljs-string">&quot;git add . &amp;&amp; git commit -m &#x27;source update&#x27; &amp;&amp; git push origin source&quot;</span><br><span class="hljs-keyword">try</span>:<br>    os.system(static_cmd)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;网页push成功！&quot;</span>)<br>    os.system(source_cmd)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;源代码push成功！&quot;</span>)<br><span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;部署失败，请手动检查情况！&quot;</span>)<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>有时候出现测试git连接失败、或推送失败、部署失败，大概率是因为<strong>代理</strong>问题，关闭代理或参考以下方法重新部署：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 在clash规则里面添加的，用于22端口直连，因为ssh使用的是22端口</span><br>- DST-PORT,22,DIRECT <br><span class="hljs-comment">## 测试git连接</span><br>ssh git@github.com<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Hexo 博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
